TODOS:

* Core
	> Refactor mouse and keyboard events model. 
		V Extract dispatching to separate loop.
	
	> The scene should be initiated on actualization, not on the engine init
		V Initialization in display(GL)
	> Animation
		- Out-of-screen simplified behavior and physics?
		- some default container for scene dynamics aggregation (scripted events, world AI)
			V scene intialization from config.
			
		- adapt frame length to average FPS.
	> Graphics
		- LOD 
		- scene entity tree clipping 
		- scene UI
		- renderer interface instead of plain JOGL?
		- import object "looks" from files
		V look priority (using z-component and depth test?)
	> Integration
	    - configurable minimized window behavior
	    - 
	> Optimization
		- faster sprites rendering
		- faster light sources
		- 
		
* Resource loading
	> JAXB
		V configuration
	> JSON
		V configuration	
	> text
		> ui labels
		> dialogue
		V shaders
		> scripts
	> binary
		> meshes
		> textures
		> sounds
		> saves
	> Resource managers and bundles

* Navigation
	V Mouse to world coordinates conversion must be fixed
	V Zoom out is broken (objects go out of GL clipping area)
	> Strafing speed should be visually consistent on different zoom values.
	> Limit scene dimensions and limit transposition to scene borders
	
* Physics
	V Configurable engine (on/off :)
	> Invent interface.
	> Interface for "interactive" entities
		- Autodetect the interactive flag (or, maybe, separate functions in Scene)
			V 
		- Containing sphere.
		- Must not have overhead inside animation loop (currently there is (PhysicEntity) casting).
	> Implement proximity and collision detection 
		V Start with Quadtree. Optimize for rapid updates. 
		- Check the BD-tree
		V hash map
    > Other
		- Runga Kutta
		- fine-grained collisions
	
* Profiling/optimization
	> replace JRE data structures with primitive-specific
	> replace/optimize Swing event threads?
	> A memory manager/monitor
	V Scene load/unload mechanizm.
	> cpu monitoring / thread load display
	> debug instrumentation 
	> performance management
		- hardware capabilities detection, bundle to list of relevant capabilities  
		- automatic reduction of behavior, physics and rendering quality?

		
Polygons:
	Graham scan
	Delaunay triangulation
	Voronoi
 	Hertel-Mehlhorn heuristic
	